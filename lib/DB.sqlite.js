/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
Notes:
1. Don't use ";" in any queries except as a statement terminator.
   For example, don't use a raw ";" in any strings.
   If ";" is used, it must be escaped as \;
   The escape function automatically handles escaping ; characters
2. Errors are generated by updating jsharmony_meta(errcode, errmsg)
   Notices have an errcode of -1
*/

var DB = require('jsharmony-db');
var types = DB.types;
var sqlite3 = require('sqlite3');
var _ = require('lodash');
var async = require('async');
var moment = require('moment');
var crypto = require('crypto');

//Locks
//usage: lock('lockname',function(release){ /* actions */ release(); });
var _locks = {};
function lock(id, f){
  if(id in _locks){ setTimeout(function(){ lock(id, f); }, 10); }
  else {
    _locks[id] = true;
    f(function(){ delete _locks[id]; });
  }
}

var _INIT_COMPLETE = '%%%INITCOMPLETE%%%';

var dtParser = function(preserve_timezone, time_only){
  return function (dt) {
    if (!dt) return dt;
    prefix = (time_only ? '1970-01-01 ':'');

    var has_timezone = false;
    if (/Z|[+\-][0-9]+(:[0-9]+)?$/.test(dt)) has_timezone = true;
    var mdt = null;
    if (has_timezone) mdt = moment.parseZone(prefix+dt);
    else mdt = moment(prefix+dt);

    if (!mdt.isValid()) return dt;

    var re_micros = /:\d\d\.\d\d\d(\d+)/.exec(prefix+dt);
    var str_micros = '';
    var micros = 0;
    if(re_micros){
      str_micros = re_micros[1];
      micros = parseFloat("0."+str_micros) * 1000; 
    }

    var suffix = str_micros;
    if(preserve_timezone) suffix += mdt.format("Z");
    var rslt = '';
    if(time_only) rslt = mdt.format("1970-01-01THH:mm:ss.SSS")+suffix;
    else rslt = mdt.format("YYYY-MM-DDTHH:mm:ss.SSS")+suffix;
    return rslt;
  }
}

var boolParser = function(val){
  if(val===null) return null;
  if(val==='') return null;
  if(val===true) return true;
  if(val===false) return false;
  var valstr = val.toString().toUpperCase();
  if((valstr==='TRUE')||(valstr==='T')||(valstr==='Y')||(valstr==='YES')||(valstr==='ON')||(valstr==='1')) return true;
  if((valstr==='FALSE')||(valstr==='F')||(valstr==='N')||(valstr==='NO')||(valstr==='OFF')||(valstr==='0')) return false;
}

/*
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
pgtypes.setTypeParser(16, boolParser); //16 = bool
//pgtypes.setTypeParser(20, pgtypes.getTypeParser(21));  Use this to convert bigint to int //20=int8,21=int2
pgtypes.setTypeParser(1082, dtParser(false)); //was pgParseDate //1082=date
pgtypes.setTypeParser(1083, dtParser(false, true)); //was pgParseDate //1083=time
pgtypes.setTypeParser(1114, dtParser(false)); //was pgParseDate //1114=timestamp
pgtypes.setTypeParser(1184, dtParser(true)); //1184=timestamptz
//1186=interval
pgtypes.setTypeParser(1266, dtParser(true, true));//1266=timetz
//pgtypes.setTypeParser(1560, function (val) { if (val && val != '0') return true; return false; }); //Convert bit to boolean
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
*/

function DBdriver() {
  this.name = 'sqlite';
  this.sql = require('./DB.sqlite.sql.js');
  this.meta = require('./DB.sqlite.meta.js');
  this.initsql = "\
    create table if not exists jsharmony_meta as select '' context,0 errcode,'' errmsg,'' jsexec,null as aud_seq; \
    "+_INIT_COMPLETE+";\
    ";
  this.dbpool = {};
}

DBdriver.prototype.Init = function () { }

DBdriver.prototype.Close = function(onClosed){
  var _this = this;
  //If no remaining connections, run the callback
  if(_.isEmpty(_this.dbpool)){ if(onClosed) onClosed(); }
  //Close the connections, one at a time
  for(var conid in _this.dbpool){
    _this.dbpool[conid].close(function(){
      //Remove the connection from the pool
      delete _this.dbpool[conid];
      //Rerun the Close function to target the next connection
      _this.Close(onClosed); 
    });
    break;
  }
}

DBdriver.prototype.getDBParam = function (dbtype, val) {
  var _this = this;
  if (!dbtype) throw new Error('Cannot get dbtype of null object');
  if (val === null) return 'NULL';
  if (typeof val === 'undefined') return 'NULL';
  
  if ((dbtype.name == 'VarChar') || (dbtype.name == 'Char')) {
    var valstr = val.toString();
    if (dbtype.length == types.MAX) return "cast('" + _this.escape(valstr) + "' as text)";
    return "cast('" + _this.escape(valstr.substring(0, dbtype.length)) + "' as text)";
  }
  else if (dbtype.name == 'VarBinary') {
    var valbin = null;
    if (val instanceof Buffer) valbin = val;
    else valbin = new Buffer(val.toString());
    if (valbin.length == 0) return "NULL";
    return "X'" + valbin.toString('hex').toLowerCase() + "'";
  }
  else if ((dbtype.name == 'BigInt') || (dbtype.name == 'Int') || (dbtype.name == 'SmallInt') || (dbtype.name == 'TinyInt')) {
    var valint = parseInt(val);
    if (isNaN(valint)) { return "NULL"; }
    return valint.toString();
  }
  else if (dbtype.name == 'Boolean') {
    if((val==='')||(typeof val == 'undefined')) return "NULL";
    var valbool = val.toString().toUpperCase();
    if(boolParser(val)) return '1';
    return '0';
  }
  else if (dbtype.name == 'Decimal') {
    var valfloat = parseFloat(val);
    if (isNaN(valfloat)) { return "NULL"; }
    //return valfloat.toString();
    return "cast('" + _this.escape(val.toString()) + "' as numeric)";
  }
  else if (dbtype.name == 'Float') {
    var valfloat = parseFloat(val);
    if (isNaN(valfloat)) { return "NULL"; }
    //return valfloat.toString();
    return "cast('" + _this.escape(val.toString()) + "' as real)";
  }
  else if ((dbtype.name == 'Date') || (dbtype.name == 'Time') || (dbtype.name == 'DateTime')) {
    var suffix = '';

    var valdt = null;
    if (val instanceof Date) { valdt = val; }
    else {
      if (isNaN(Date.parse(val))) return "NULL";
      valdt = new Date(val);
    }

    var mdate = moment(valdt);
    if (!mdate.isValid()) return "NULL";

    //Convert to local on timestamptz and timetz
    if('jsh_utcOffset' in val){
      //Time is in UTC, Offset specifies amount and timezone
      var neg = false;
      if(val.jsh_utcOffset < 0){ neg = true; }
      suffix = moment.utc(new Date(val.jsh_utcOffset*(neg?-1:1)*60*1000)).format('HH:mm');
      //Reverse offset
      suffix = ' '+(neg?'+':'-')+suffix;

      mdate = moment.utc(valdt);
      mdate = mdate.add(val.jsh_utcOffset*-1, 'minutes');
    }

    if('jsh_microseconds' in val){
      var ms_str = "000"+(Math.round(val.jsh_microseconds)).toString();
      ms_str = ms_str.slice(-3);
      suffix = ms_str.replace(/0+$/,'') + suffix;
    }

    var rslt = '';
    if (dbtype.name == 'Date') rslt = "'" + mdate.format('YYYY-MM-DD') + "'";
    else if (dbtype.name == 'Time') rslt = "'" + mdate.format('HH:mm:ss.SSS') + suffix + "'";
    else rslt = "'" + mdate.format('YYYY-MM-DD HH:mm:ss.SSS') + suffix + "'";
    return rslt;
  }
  throw new Error('Invalid datetype: ' + JSON.stringify(dbtype));
}

DBdriver.prototype.ExecSession = function (dbtrans, constring, session) {
  var _this = this;
  
  if (dbtrans) {
    session(null, dbtrans.con, '', function () { });
  }
  else {
    if(!constring) constring = global.dbconfig;
    var onRelease = function(con, release){
      return function () { 
        //Do not close in-memory databases
        if(constring.database == ':memory:') return release();
        con.close(function(){
          delete _this.dbpool[constring.database];
          release();
        }); 
      };
    }
    lock(constring.database, function(release){
      if(constring.database in _this.dbpool){
        var con = _this.dbpool[constring.database];
        return session(null, con, _this.initsql + (constring._presql || ''), onRelease(con, release));
      }
      var con = new sqlite3.Database(constring.database, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, function(err){
        _this.dbpool[constring.database] = con;
        if (err) { return ExecError(err, session, "DB Connect Error: "); }
        session(null, con, _this.initsql + (constring._presql || ''), onRelease(con, release));
      });
    });
  }
}

function ExecError(err, callback, errprefix) {
  if (global.debug_params && global.debug_params.db_error_sql_state) DB.log((errprefix || '') + err.toString());
  if (callback) return callback(err, null);
  else throw err;
}

function splitSQL(fsql){
  var sql = [];
  var lastidx = fsql.length;
  //Escape JSEXEC expressions
  while((lastidx=fsql.lastIndexOf('%%%JSEXEC_ESCAPE(',lastidx-1))>=0){
    var endPos = fsql.indexOf(')%%%',lastidx);
    if(endPos >= 0){
      var match = fsql.substr(lastidx,endPos-lastidx+4);
      var expr = match.substr(17);
      expr = expr.substr(0,expr.length-4);
      expr = expr.replace(/'/g,"''").replace(/\\;/g,"\\\\\\;").replace(/\r/g," ").replace(/\n/g,"\\n ");
      fsql = fsql.substr(0,lastidx) + expr + fsql.substr(lastidx+match.length);
    }
  }
  while(fsql){
    var nexts = fsql.indexOf(';');
    while((nexts > 0) && (fsql[nexts-1]=="\\")) nexts = fsql.indexOf(';', nexts+1);
    if(nexts < 0){ sql.push(fsql.trim()); fsql = ''; }
    else if(nexts==0) fsql = fsql.substr(1);
    else{ sql.push(fsql.substr(0,nexts).trim()); fsql = fsql.substr(nexts+1); }
  }
  for(var i=0;i<sql.length;i++){
    var stmt = sql[i];
    //Remove empty statements
    var is_empty = stmt.match(/^(\s)*$/);
    var is_comment = stmt.match(/^(\s)*\/\//);
    var is_comment = is_comment || stmt.match(/^(\s)*--/);
    if(is_empty || is_comment){
      sql.splice(i,1);
      i--;
      continue;
    }
    stmt = DB.util.ReplaceAll(stmt, "\\;", ';');
    sql[i] = stmt;
  }
  return sql;
}

DBdriver.prototype.ExecQuery = function(con, sql, conComplete, callback, processor) {
  var _this = this;

  //Split SQL into an array
  sql = splitSQL(sql);

  //Set start_idx
  var start_idx = 0;
  for(var i=0;i<sql.length;i++){
    if(!start_idx && (sql[i] == _INIT_COMPLETE)){
      start_idx = i;
      sql.splice(i,1);
      i--;
    }
  }

  //console.log(sql); //Log all SQL statements for debugging

  //Run SQL
  var notices = [];
  var startTime = Date.now();
  var rslt = [];
  var idx = 0;

  var last_stmt = '';

  async.eachSeries(sql, function(stmt, stmt_cb){
    idx++;
    var is_select = stmt.match(/^(\s)*(select|with)/gi);
    var is_pragma = stmt.match(/^(\s)*(pragma)/gi);
    last_stmt = stmt;
    con.all(stmt, function (err, stmt_rslt) {
      if(idx > start_idx){
        if(is_select) rslt.push(stmt_rslt);
        else if(is_pragma && stmt_rslt.length) rslt.push(stmt_rslt);
      }
      if(err) { } //Don't check for jsharmony_meta(errcode) if err was generated by statement
      else if(idx <= start_idx) { } //Don't check for jsharmony_meta(errcode) before jsharmony_meta is initialized
      else return con.all("select errcode, errmsg, jsexec from jsharmony_meta", function(err, stmt_rslt){
        idx++;
        if(err) return stmt_cb(err);
        else if(!stmt_rslt || !stmt_rslt.length) return stmt_cb(new Error('No data returned from jsharmony_meta'));
        else if(stmt_rslt[0].errcode && (stmt_rslt[0].errcode==-1)){ notices.push(stmt_rslt[0].errmsg); }
        else if(stmt_rslt[0].errcode) return stmt_cb({ number: stmt_rslt[0].errcode, message: stmt_rslt[0].errmsg });
        if(!stmt_rslt[0].jsexec) return stmt_cb(null);

        //Execute jsexec function
        var strexec = stmt_rslt[0].jsexec.toString().trim();
        if(strexec.substr(strexec.length-1,1)==',') strexec = strexec.substr(0,strexec.length-1);
        strexec = '['+strexec+']';
        var jsexec = null;
        try{
          jsexec = JSON.parse(strexec);
        }
        catch(ex){
          return stmt_cb(new Error('Error parsing jsharmony_meta jsexec command: '+strexec));
        }
        async.eachSeries(jsexec, function(jscmd, jsexec_cb){
          if(!jscmd) return jsexec_cb(null);
          var jscmdstr = JSON.stringify(jscmd);
          if(!jscmd.function) return jsexec_cb(new Error('jsharmony_meta jsexec command missing function: '+jscmdstr));
          var f = jscmd.function;
          if(f=='sha1'){
            if(!jscmd.table) return jsexec_cb(new Error('jsharmony_meta jsexec command missing "table" parameter: '+jscmdstr));
            if(!jscmd.rowid) return jsexec_cb(new Error('jsharmony_meta jsexec command missing "rowid" parameter: '+jscmdstr));
            if(!jscmd.source) return jsexec_cb(new Error('jsharmony_meta jsexec command missing "source" parameter: '+jscmdstr));
            if(!jscmd.dest) return jsexec_cb(new Error('jsharmony_meta jsexec command missing "dest" parameter: '+jscmdstr));
            con.all("select ("+jscmd.source+") as hash from "+jscmd.table+" where rowid="+_this.getDBParam(types.BigInt,jscmd.rowid), function(err, cmd_rslt){
              if(err) return jsexec_cb(err);
              if(!cmd_rslt.length) return jsexec_cb(new Error('jsharmony_meta jsexec No results for hash source'));
              var hash = crypto.createHash('sha1').update(cmd_rslt[0]['hash']||'').digest();
              con.all("update "+jscmd.table+" set "+jscmd.dest+"="+_this.getDBParam(types.VarBinary(types.MAX),hash)+" where rowid="+_this.getDBParam(types.BigInt,jscmd.rowid), jsexec_cb);
            });
          }
          else if(f=='exec'){
            if(!jscmd.sql) return jsexec_cb(new Error('jsharmony_meta jsexec command missing "sql" parameter: '+jscmdstr));
            var fsql = splitSQL(jscmd.sql);
            async.eachSeries(fsql, function(fsql_stmt,fsql_cb){
              last_stmt = fsql_stmt;
              con.all(fsql_stmt, fsql_cb);
            }, jsexec_cb);
          }
          else return jsexec_cb(new Error('jsharmony_meta jsexec invalid function: '+jscmdstr));
        }, function(err){
          if(err) return stmt_cb(err);
          con.all("update jsharmony_meta set jsexec=''", stmt_cb);
        });
      });
      stmt_cb(err);
    });
  },function(err){
    var totTime = Date.now()-startTime;
    //console.log('Executed '+idx+' statements');
    //console.log('Time: '+totTime+'ms');
    //console.log(Math.round(totTime/idx) + 'ms per statement');
    //console.log(rslt); //Log all SQL results for debugging

    conComplete();
    if (err) { return ExecError(err, callback, 'SQL Error: ' + last_stmt + ' :: '); }
    if (notices.length) { return ExecError(notices[0], callback, 'SQL Error: ' + last_stmt + ' :: '); }
    processor(rslt);
  });
}

DBdriver.prototype.Exec = function (dbtrans, context, return_type, sql, ptypes, params, callback, constring) {
  var _this = this;
  
  _this.ExecSession(dbtrans, constring, function (err, con, presql, conComplete) {
    if(err) {
      if (callback != null) callback(err, null);
      else throw err;
      return;
    }
    
    var execsql = presql + _this.getContextSQL(context) + sql;
    
    //Apply ptypes, params to SQL
    var ptypes_ref = {};
    var i = 0;
    for (var p in params) {
      ptypes_ref[p] = ptypes[i];
      i++;
    }
    //Sort params by length
    var param_keys = _.keys(params);
    param_keys.sort(function (a, b) { return b.length - a.length; });
    //Replace params in SQL statement
    for (var i = 0; i < param_keys.length; i++) {
      var p = param_keys[i];
      var val = params[p];
      if (val === '') val = null;
      execsql = DB.util.ReplaceAll(execsql, '@' + p, _this.getDBParam(ptypes_ref[p], val));
    }
    
    //DB.log(execsql);
    //console.log(params);
    //console.log(ptypes);
    
    //Execute sql    
    _this.ExecQuery(con, execsql, conComplete, callback, function (rslt) {
      var dbrslt = null;
      
      if (return_type == 'row') { if (rslt.length && rslt[0].length) dbrslt = rslt[0][0]; }
      else if (return_type == 'recordset'){ if(rslt.length) dbrslt = rslt[0]; }
      else if (return_type == 'multirecordset') { dbrslt = rslt; }
      else if (return_type == 'scalar') {
        if (rslt.length && rslt[0].length) {
          var row = rslt[0][0];
          for (var key in row) if (row.hasOwnProperty(key)) dbrslt = row[key];
        }
      }
      if (callback) callback(null, dbrslt);
    });
  });
};

DBdriver.prototype.ExecTransTasks = function (dbtasks, callback, constring) {
  if (!constring) constring = global.dbconfig;
  var _this = this;
  _this.ExecSession(null, constring, function (err, con, presql, conComplete) {
    if(err) return callback(err, null);
    //Begin transaction
    _this.ExecQuery(con, presql + "begin transaction", function () { }, callback, function () {
      var transtbl = {};
      var trans = { con: con };
      dbtasks = _.reduce(dbtasks, function (rslt, dbtask, key) {
        rslt[key] = function (callback) {
          var xcallback = function (err, rslt) {
            if (rslt != null) {
              if (!_.isArray(rslt) || rslt.length < 2)
                transtbl = _.extend(transtbl, rslt);
            }
            callback(err, rslt);
          };
          return dbtask.call(null, trans, xcallback, transtbl);
        };
        return rslt;
      }, {});
      async.series(dbtasks, function (dberr, rslt) {
        if (dberr != null) {
          if ((constring.jsharmony_options && (constring.jsharmony_options.stopTransactionAndCommitOnWarning)) && 
              (dberr.severity == 'WARNING')) {
            _this.ExecQuery(con, "commit transaction", conComplete, callback, function () {
              callback(dberr, null);
            });
          }
          else {
            //Rollback transaction
            _this.ExecQuery(con, "rollback transaction", conComplete, callback, function () {
              callback(dberr, null);
            });
          }
        }
        else {
          //Commit transaction
          _this.ExecQuery(con, "commit transaction", conComplete, callback, function () {
            callback(null, rslt);
          });
        }
      });
    });
  });
};

DBdriver.prototype.escape = function(val){ return this.sql.escape(val); }

DBdriver.prototype.getContextSQL = function(context) {
  var rslt = "update jsharmony_meta set errcode=0,errmsg='',context='"+(context?this.escape(context):'USystem')+"',jsexec='',aud_seq=null;";
  return rslt;
}

exports = module.exports = DBdriver;
